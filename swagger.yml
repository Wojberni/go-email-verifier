basePath: /v2
consumes:
    - application/json
definitions:
    error:
        description: default struct for error handling
        properties:
            code:
                description: the error code
                format: int64
                maximum: 599
                minimum: 100
                type: integer
                x-go-name: Code
            message:
                description: the error message
                type: string
                x-go-name: Message
        required:
            - code
            - message
        title: Error object
        type: object
        x-go-name: Error
        x-go-package: go-email-verfier
    user:
        description: |-
            A user is the security principal for this application.
            It's also used as one of main axes for reporting.
        properties:
            age:
                description: the age of this user
                format: int64
                minimum: 1
                type: integer
                x-go-name: Age
            email:
                description: the email address for this user
                example: user@provider.net
                format: email
                type: string
                x-go-name: Email
            id:
                description: the id for this user
                format: int64
                minimum: 1
                type: integer
                x-go-name: Id
            name:
                description: the name for this user
                minLength: 3
                type: string
                x-go-name: Name
            uuid:
                description: the uuid for this user
                format: uuid
                type: string
                x-go-name: Uuid
        required:
            - uuid
            - id
            - name
            - email
        title: User for this application
        type: object
        x-go-name: User
        x-go-package: go-email-verfier
host: localhost:1323
info:
    contact:
        email: wojciech.bernatek@gmail.com
        name: Wojciech Bernatek
    description: |-
        the purpose of this application is to provide an application
        that is using plain go code to define an API

        This should demonstrate all the possible comment annotations
        that are available to turn go code into a fully compliant swagger 2.0 spec
    license:
        name: MIT
        url: http://opensource.org/licenses/MIT
    termsOfService: there are no TOS at this moment, use at your own risk we take no responsibility
    title: Email Verifier API.
    version: 0.0.1
paths:
    /users:
        get:
            description: This endpoint is responsible for fetching all users.
            operationId: getAllUsers
            summary: Get all users created in application.
        post:
            description: |-
                This will create an user for application.
                Required are email and password for user creation.
            operationId: createUser
            parameters:
                - description: Name of the created user
                  in: body
                  name: name
                  required: true
                  schema:
                    type: string
                  x-go-name: Name
                - description: Email of the created user
                  in: body
                  name: email
                  required: true
                  schema:
                    type: string
                  x-go-name: Email
            responses:
                "200":
                    $ref: '#/responses/createUserResponse'
                default:
                    description: error
                    schema:
                        $ref: '#/definitions/error'
            summary: Create user based on required parameters.
produces:
    - application/json
responses:
    createUserResponse:
        description: User returned on successful creation
        schema:
            $ref: '#/definitions/user'
schemes:
    - http
    - https
security:
    - api_key: []
securityDefinitions:
    api_key:
        in: header
        name: KEY
        type: apiKey
    oauth2:
        authorizationUrl: /oauth2/auth
        flow: accessCode
        in: header
        scopes:
            bar: foo
        tokenUrl: /oauth2/token
        type: oauth2
swagger: "2.0"
x-meta-array:
    - value1
    - value2
x-meta-array-obj:
    - name: obj
      value: field
x-meta-value: value
