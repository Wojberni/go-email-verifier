basePath: /v2
consumes:
    - application/json
definitions:
    error:
        description: default struct for error handling
        properties:
            code:
                description: the error code
                example: 500
                format: int64
                maximum: 599
                minimum: 100
                type: integer
                x-go-name: Code
            message:
                description: the error message
                example: error message returned by function
                type: string
                x-go-name: Message
        required:
            - code
            - message
        title: Error object
        type: object
        x-go-name: Error
        x-go-package: go-email-verifier/error
    user:
        description: |-
            A user is the security principal for this application.
            Every asset is associated with logged in user.
        properties:
            age:
                description: the age of this user
                format: int64
                minimum: 1
                type: integer
                x-go-name: Age
            email:
                description: the email address for this user
                example: user@provider.net
                format: email
                type: string
                x-go-name: Email
            id:
                description: the id for this user
                format: int64
                minimum: 1
                type: integer
                x-go-name: Id
            name:
                description: the name for this user
                minLength: 3
                type: string
                x-go-name: Name
            uuid:
                description: the uuid for this user
                format: uuid
                type: string
                x-go-name: Uuid
        required:
            - uuid
            - id
            - name
            - email
        title: User for this application
        type: object
        x-go-name: User
        x-go-package: go-email-verifier/user
host: localhost:1323
info:
    contact:
        email: wojciech.bernatek@gmail.com
        name: Wojciech Bernatek
    description: |-
        The purpose of this application is to provide an application that allows to:
        <ul>
        <li>validate email and its domain</li>
        <li>create clean mailing lists</li>
        <li>blacklist domains and invalid emails</li>
        </ul>
    license:
        name: MIT
        url: http://opensource.org/licenses/MIT
    termsOfService: There are no TOS at this moment, use at your own risk we take no responsibility
    title: Email Verifier API.
    version: 0.0.1
paths:
    /users:
        get:
            description: This endpoint is responsible for fetching all users.
            operationId: GetAllUsers
            responses:
                "200":
                    description: user
                    schema:
                        items:
                            $ref: '#/definitions/user'
                        type: array
                default:
                    description: error
                    schema:
                        $ref: '#/definitions/error'
            summary: Get all users created in application.
        post:
            description: |-
                This will create an user for application.
                Required are email and password for user creation.
            operationId: CreateUser
            parameters:
                - description: These are parameters required for creating a new user
                  in: body
                  name: body
                  required: true
                  schema:
                    properties:
                        age:
                            format: int64
                            type: integer
                            x-go-name: Age
                        email:
                            type: string
                            x-go-name: Email
                        name:
                            type: string
                            x-go-name: Name
                    type: object
                  x-go-name: Body
            responses:
                "201":
                    description: user
                    schema:
                        $ref: '#/definitions/user'
                default:
                    description: error
                    schema:
                        $ref: '#/definitions/error'
            summary: Create user based on required parameters.
    /users/{id}:
        delete:
            description: This will delete an user for application.
            operationId: DeleteUser
            parameters:
                - description: The ID of the order
                  format: int64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "201":
                    description: user
                    schema:
                        $ref: '#/definitions/user'
                default:
                    description: error
                    schema:
                        $ref: '#/definitions/error'
            summary: Delete user based on id.
        get:
            description: This will find and return an user for application given id.
            operationId: GetUser
            parameters:
                - description: The ID of the order
                  format: int64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "201":
                    description: user
                    schema:
                        $ref: '#/definitions/user'
                default:
                    description: error
                    schema:
                        $ref: '#/definitions/error'
            summary: Get user based on id.
        put:
            description: |-
                This will update an user for application.
                Required are email and password for user creation.
            operationId: UpdateUser
            parameters:
                - description: These are parameters required for creating a new user
                  in: body
                  name: body
                  required: true
                  schema:
                    properties:
                        age:
                            format: int64
                            type: integer
                            x-go-name: Age
                        email:
                            type: string
                            x-go-name: Email
                        name:
                            type: string
                            x-go-name: Name
                    type: object
                  x-go-name: Body
                - description: The ID of the order
                  format: int64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "201":
                    description: user
                    schema:
                        $ref: '#/definitions/user'
                default:
                    description: error
                    schema:
                        $ref: '#/definitions/error'
            summary: Update user given id based on required parameters.
produces:
    - application/json
schemes:
    - http
    - https
security:
    - api_key: []
securityDefinitions:
    api_key:
        in: header
        name: KEY
        type: apiKey
    oauth2:
        authorizationUrl: /oauth2/auth
        flow: accessCode
        in: header
        scopes:
            bar: foo
        tokenUrl: /oauth2/token
        type: oauth2
swagger: "2.0"
x-meta-array:
    - value1
    - value2
x-meta-array-obj:
    - name: obj
      value: field
x-meta-value: value
